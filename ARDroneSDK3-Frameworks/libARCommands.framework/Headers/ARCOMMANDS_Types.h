/**
 * @file libARCommands/ARCOMMANDS_Types.h
 * @brief libARCommands types header.
 * This file contains all types declarations needed to use commands
 * @note Autogenerated file
 **/
#ifndef _LIBARCOMMANDS_ARCOMMANDS_TYPES_H_
#define _LIBARCOMMANDS_ARCOMMANDS_TYPES_H_
#include <inttypes.h>

/**
 * @brief Size of the ARCommands header.
 * This is the minimum size of a zero-arg command.
 * The size of a command is equal to this, plus the size
 * of its arguments.
 */
#define ARCOMMANDS_HEADER_SIZE (4)

/**
 * Defined only if the library includes debug commands
 */
#define ARCOMMANDS_HAS_DEBUG_COMMANDS (1)

// Project ARDrone3
// Class Animations
// Command Flip

/**
 * @brief Direction for the flip
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_ANIMATIONS_FLIP_DIRECTION_FRONT = 0,    ///< Flip direction front
    ARCOMMANDS_ARDRONE3_ANIMATIONS_FLIP_DIRECTION_BACK,    ///< Flip direction back
    ARCOMMANDS_ARDRONE3_ANIMATIONS_FLIP_DIRECTION_RIGHT,    ///< Flip direction right
    ARCOMMANDS_ARDRONE3_ANIMATIONS_FLIP_DIRECTION_LEFT,    ///< Flip direction left
    ARCOMMANDS_ARDRONE3_ANIMATIONS_FLIP_DIRECTION_MAX
} eARCOMMANDS_ARDRONE3_ANIMATIONS_FLIP_DIRECTION;

// Project ARDrone3
// Class MediaRecord
// Command Video

/**
 * @brief Command to record video
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_MEDIARECORD_VIDEO_RECORD_STOP = 0,    ///< Stop the video recording
    ARCOMMANDS_ARDRONE3_MEDIARECORD_VIDEO_RECORD_START,    ///< Start the video recording
    ARCOMMANDS_ARDRONE3_MEDIARECORD_VIDEO_RECORD_MAX
} eARCOMMANDS_ARDRONE3_MEDIARECORD_VIDEO_RECORD;

// Project ARDrone3
// Class MediaRecord
// Command VideoV2

/**
 * @brief Command to record video
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_MEDIARECORD_VIDEOV2_RECORD_STOP = 0,    ///< Stop the video recording
    ARCOMMANDS_ARDRONE3_MEDIARECORD_VIDEOV2_RECORD_START,    ///< Start the video recording
    ARCOMMANDS_ARDRONE3_MEDIARECORD_VIDEOV2_RECORD_MAX
} eARCOMMANDS_ARDRONE3_MEDIARECORD_VIDEOV2_RECORD;

// Project ARDrone3
// Class MediaRecordState
// Command VideoStateChanged

/**
 * @brief State of video
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE_STOPPED = 0,    ///< Video was stopped
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE_STARTED,    ///< Video was started
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE_FAILED,    ///< Video was failed
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE_AUTOSTOPPED,    ///< Video was auto stopped
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE_MAX
} eARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE;

// Project ARDrone3
// Class MediaRecordState
// Command PictureStateChangedV2

/**
 * @brief State of device picture recording
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE_READY = 0,    ///< The picture recording is ready
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE_BUSY,    ///< The picture recording is busy
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE_NOTAVAILABLE,    ///< The picture recording is not available
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE_MAX
} eARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE;

// Project ARDrone3
// Class MediaRecordState
// Command PictureStateChangedV2

/**
 * @brief Error to explain the state
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_OK = 0,    ///< No Error
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_UNKNOWN,    ///< Unknown generic error
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_CAMERA_KO,    ///< Picture camera is out of order
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_MEMORYFULL,    ///< Memory full ; cannot save one additional picture
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_LOWBATTERY,    ///< Battery is too low to start/keep recording.
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_MAX
} eARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR;

// Project ARDrone3
// Class MediaRecordState
// Command VideoStateChangedV2

/**
 * @brief State of device video recording
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE_STOPPED = 0,    ///< Video is stopped
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE_STARTED,    ///< Video is started
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE_NOTAVAILABLE,    ///< The video recording is not available
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE_MAX
} eARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE;

// Project ARDrone3
// Class MediaRecordState
// Command VideoStateChangedV2

/**
 * @brief Error to explain the state
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_OK = 0,    ///< No Error
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_UNKNOWN,    ///< Unknown generic error
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_CAMERA_KO,    ///< Video camera is out of order
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_MEMORYFULL,    ///< Memory full ; cannot save one additional video
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_LOWBATTERY,    ///< Battery is too low to start/keep recording.
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_MAX
} eARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR;

// Project ARDrone3
// Class MediaRecordEvent
// Command PictureEventChanged

/**
 * @brief Last event of picture recording
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT_TAKEN = 0,    ///< Picture taken and saved
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT_FAILED,    ///< Picture failed
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT_MAX
} eARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT;

// Project ARDrone3
// Class MediaRecordEvent
// Command PictureEventChanged

/**
 * @brief Error to explain the event
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_OK = 0,    ///< No Error
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_UNKNOWN,    ///< Unknown generic error ; only when state is failed
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_BUSY,    ///< Picture recording is busy ; only when state is failed
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_NOTAVAILABLE,    ///< Picture recording not available ; only when state is failed
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_MEMORYFULL,    ///< Memory full ; only when state is failed
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_LOWBATTERY,    ///< Battery is too low to record.
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_MAX
} eARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR;

// Project ARDrone3
// Class MediaRecordEvent
// Command VideoEventChanged

/**
 * @brief Event of video recording
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT_START = 0,    ///< Video start
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT_STOP,    ///< Video stop and saved
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT_FAILED,    ///< Video failed
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT_MAX
} eARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT;

// Project ARDrone3
// Class MediaRecordEvent
// Command VideoEventChanged

/**
 * @brief Error to explain the event
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_OK = 0,    ///< No Error
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_UNKNOWN,    ///< Unknown generic error ; only when state is failed
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_BUSY,    ///< Video recording is busy ; only when state is failed
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_NOTAVAILABLE,    ///< Video recording not available ; only when state is failed
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_MEMORYFULL,    ///< Memory full
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_LOWBATTERY,    ///< Battery is too low to record.
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_AUTOSTOPPED,    ///< Video was auto stopped
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_MAX
} eARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR;

// Project ARDrone3
// Class PilotingState
// Command FlyingStateChanged

/**
 * @brief Drone flying state
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_LANDED = 0,    ///< Landed state
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_TAKINGOFF,    ///< Taking off state
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_HOVERING,    ///< Hovering state
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_FLYING,    ///< Flying state
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_LANDING,    ///< Landing state
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_EMERGENCY,    ///< Emergency state
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_MAX
} eARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE;

// Project ARDrone3
// Class PilotingState
// Command AlertStateChanged

/**
 * @brief Drone alert state
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_ALERTSTATECHANGED_STATE_NONE = 0,    ///< No alert
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_ALERTSTATECHANGED_STATE_USER,    ///< User emergency alert
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_ALERTSTATECHANGED_STATE_CUT_OUT,    ///< Cut out alert
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_ALERTSTATECHANGED_STATE_CRITICAL_BATTERY,    ///< Critical battery alert
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_ALERTSTATECHANGED_STATE_LOW_BATTERY,    ///< Low battery alert
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_ALERTSTATECHANGED_STATE_TOO_MUCH_ANGLE,    ///< The angle of the drone is too high
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_ALERTSTATECHANGED_STATE_MAX
} eARCOMMANDS_ARDRONE3_PILOTINGSTATE_ALERTSTATECHANGED_STATE;

// Project ARDrone3
// Class PilotingState
// Command NavigateHomeStateChanged

/**
 * @brief State of navigate home
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_STATE_AVAILABLE = 0,    ///< Navigate home is available
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_STATE_INPROGRESS,    ///< Navigate home is in progress
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_STATE_UNAVAILABLE,    ///< Navigate home is not available
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_STATE_PENDING,    ///< Navigate home has been received, but its process is pending
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_STATE_MAX
} eARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_STATE;

// Project ARDrone3
// Class PilotingState
// Command NavigateHomeStateChanged

/**
 * @brief Reason of the state
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_REASON_USERREQUEST = 0,    ///< User requested a navigate home (available->inProgress)
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_REASON_CONNECTIONLOST,    ///< Connection between controller and product lost (available->inProgress)
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_REASON_LOWBATTERY,    ///< Low battery occurred (available->inProgress)
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_REASON_FINISHED,    ///< Navigate home is finished (inProgress->available)
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_REASON_STOPPED,    ///< Navigate home has been stopped (inProgress->available)
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_REASON_DISABLED,    ///< Navigate home disabled by product (inProgress->unavailable or available->unavailable)
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_REASON_ENABLED,    ///< Navigate home enabled by product (unavailable->available)
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_REASON_MAX
} eARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_REASON;

// Project ARDrone3
// Class Network
// Command WifiScan

/**
 * @brief The band(s) : 2.4 Ghz, 5 Ghz, or both
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_NETWORK_WIFISCAN_BAND_2_4GHZ = 0,    ///< 2.4 GHz band
    ARCOMMANDS_ARDRONE3_NETWORK_WIFISCAN_BAND_5GHZ,    ///< 5 GHz band
    ARCOMMANDS_ARDRONE3_NETWORK_WIFISCAN_BAND_ALL,    ///< Both 2.4 and 5 GHz bands
    ARCOMMANDS_ARDRONE3_NETWORK_WIFISCAN_BAND_MAX
} eARCOMMANDS_ARDRONE3_NETWORK_WIFISCAN_BAND;

// Project ARDrone3
// Class NetworkState
// Command WifiScanListChanged

/**
 * @brief The band : 2.4 GHz or 5 GHz
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_NETWORKSTATE_WIFISCANLISTCHANGED_BAND_2_4GHZ = 0,    ///< 2.4 GHz band
    ARCOMMANDS_ARDRONE3_NETWORKSTATE_WIFISCANLISTCHANGED_BAND_5GHZ,    ///< 5 GHz band
    ARCOMMANDS_ARDRONE3_NETWORKSTATE_WIFISCANLISTCHANGED_BAND_MAX
} eARCOMMANDS_ARDRONE3_NETWORKSTATE_WIFISCANLISTCHANGED_BAND;

// Project ARDrone3
// Class NetworkState
// Command WifiAuthChannelListChanged

/**
 * @brief The band of this channel : 2.4 GHz or 5 GHz
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND_2_4GHZ = 0,    ///< 2.4 GHz band
    ARCOMMANDS_ARDRONE3_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND_5GHZ,    ///< 5 GHz band
    ARCOMMANDS_ARDRONE3_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND_MAX
} eARCOMMANDS_ARDRONE3_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND;

// Project ARDrone3
// Class NetworkSettings
// Command WifiSelection

/**
 * @brief The type of wifi selection (auto, manual)
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISELECTION_TYPE_AUTO = 0,    ///< Auto selection
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISELECTION_TYPE_MANUAL,    ///< Manual selection
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISELECTION_TYPE_MAX
} eARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISELECTION_TYPE;

// Project ARDrone3
// Class NetworkSettings
// Command WifiSelection

/**
 * @brief The allowed band(s) : 2.4 Ghz, 5 Ghz, or all
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISELECTION_BAND_2_4GHZ = 0,    ///< 2.4 GHz band
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISELECTION_BAND_5GHZ,    ///< 5 GHz band
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISELECTION_BAND_ALL,    ///< Both 2.4 and 5 GHz bands
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISELECTION_BAND_MAX
} eARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISELECTION_BAND;

// Project ARDrone3
// Class NetworkSettingsState
// Command WifiSelectionChanged

/**
 * @brief The type of wifi selection settings
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_AUTO_ALL = 0,    ///< Auto selection
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_AUTO_2_4GHZ,    ///< Auto selection 2.4ghz
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_AUTO_5GHZ,    ///< Auto selection 5 ghz
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_MANUAL,    ///< Manual selection
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_MAX
} eARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE;

// Project ARDrone3
// Class NetworkSettingsState
// Command WifiSelectionChanged

/**
 * @brief The actual  wifi band state
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_2_4GHZ = 0,    ///< 2.4 GHz band
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_5GHZ,    ///< 5 GHz band
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_ALL,    ///< Both 2.4 and 5 GHz bands
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_MAX
} eARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND;

// Project ARDrone3
// Class SettingsState
// Command MotorErrorStateChanged

/**
 * @brief Enumeration of the motor error
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_NOERROR = 0,    ///< No error detected
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERROREEPROM,    ///< EEPROM access failure
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORMOTORSTALLED,    ///< Motor stalled
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORPROPELLERSECURITY,    ///< Propeller cutout security triggered
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORCOMMLOST,    ///< Communication with motor failed by timeout
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORRCEMERGENCYSTOP,    ///< RC emergency stop
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORREALTIME,    ///< Motor controler scheduler real-time out of bounds
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORMOTORSETTING,    ///< One or several incorrect values in motor settings
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORTEMPERATURE,    ///< Too hot or too cold Cypress temperature
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORBATTERYVOLTAGE,    ///< Battery voltage out of bounds
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORLIPOCELLS,    ///< Incorrect number of LIPO cells
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORMOSFET,    ///< Defectuous MOSFET or broken motor phases
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORBOOTLOADER,    ///< Not use for BLDC but useful for HAL
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORASSERT,    ///< Error Made by BLDC_ASSERT()
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_MAX
} eARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR;

// Project ARDrone3
// Class SettingsState
// Command MotorErrorLastErrorChanged

/**
 * @brief Enumeration of the motor error
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_NOERROR = 0,    ///< No error detected
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_ERROREEPROM,    ///< EEPROM access failure
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_ERRORMOTORSTALLED,    ///< Motor stalled
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_ERRORPROPELLERSECURITY,    ///< Propeller cutout security triggered
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_ERRORCOMMLOST,    ///< Communication with motor failed by timeout
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_ERRORRCEMERGENCYSTOP,    ///< RC emergency stop
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_ERRORREALTIME,    ///< Motor controler scheduler real-time out of bounds
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_ERRORMOTORSETTING,    ///< One or several incorrect values in motor settings
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_ERRORBATTERYVOLTAGE,    ///< Battery voltage out of bounds
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_ERRORLIPOCELLS,    ///< Incorrect number of LIPO cells
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_ERRORMOSFET,    ///< Defectuous MOSFET or broken motor phases
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_ERRORTEMPERATURE,    ///< Too hot or too cold Cypress temperature
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_ERRORBOOTLOADER,    ///< Not use for BLDC but useful for HAL
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_ERRORASSERT,    ///< Error Made by BLDC_ASSERT()
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_MAX
} eARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR;

// Project ARDrone3
// Class PictureSettings
// Command PictureFormatSelection

/**
 * @brief The type of photo format
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_PICTURESETTINGS_PICTUREFORMATSELECTION_TYPE_RAW = 0,    ///< Take raw image
    ARCOMMANDS_ARDRONE3_PICTURESETTINGS_PICTUREFORMATSELECTION_TYPE_JPEG,    ///< Take a 4:3 jpeg photo
    ARCOMMANDS_ARDRONE3_PICTURESETTINGS_PICTUREFORMATSELECTION_TYPE_SNAPSHOT,    ///< Take a 16:9 snapshot from camera
    ARCOMMANDS_ARDRONE3_PICTURESETTINGS_PICTUREFORMATSELECTION_TYPE_JPEG_FISHEYE,    ///< Take jpeg fisheye image only
    ARCOMMANDS_ARDRONE3_PICTURESETTINGS_PICTUREFORMATSELECTION_TYPE_MAX
} eARCOMMANDS_ARDRONE3_PICTURESETTINGS_PICTUREFORMATSELECTION_TYPE;

// Project ARDrone3
// Class PictureSettings
// Command AutoWhiteBalanceSelection

/**
 * @brief The type auto white balance
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_PICTURESETTINGS_AUTOWHITEBALANCESELECTION_TYPE_AUTO = 0,    ///< Auto guess of best white balance params
    ARCOMMANDS_ARDRONE3_PICTURESETTINGS_AUTOWHITEBALANCESELECTION_TYPE_TUNGSTEN,    ///< Tungsten white balance
    ARCOMMANDS_ARDRONE3_PICTURESETTINGS_AUTOWHITEBALANCESELECTION_TYPE_DAYLIGHT,    ///< Daylight white balance
    ARCOMMANDS_ARDRONE3_PICTURESETTINGS_AUTOWHITEBALANCESELECTION_TYPE_CLOUDY,    ///< Cloudy white balance
    ARCOMMANDS_ARDRONE3_PICTURESETTINGS_AUTOWHITEBALANCESELECTION_TYPE_COOL_WHITE,    ///< White balance for a flash
    ARCOMMANDS_ARDRONE3_PICTURESETTINGS_AUTOWHITEBALANCESELECTION_TYPE_MAX
} eARCOMMANDS_ARDRONE3_PICTURESETTINGS_AUTOWHITEBALANCESELECTION_TYPE;

// Project ARDrone3
// Class PictureSettingsState
// Command PictureFormatChanged

/**
 * @brief The type of photo format
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_PICTUREFORMATCHANGED_TYPE_RAW = 0,    ///< Take raw image
    ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_PICTUREFORMATCHANGED_TYPE_JPEG,    ///< Take a 4:3 jpeg photo
    ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_PICTUREFORMATCHANGED_TYPE_SNAPSHOT,    ///< Take a 16:9 snapshot from camera
    ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_PICTUREFORMATCHANGED_TYPE_MAX
} eARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_PICTUREFORMATCHANGED_TYPE;

// Project ARDrone3
// Class PictureSettingsState
// Command AutoWhiteBalanceChanged

/**
 * @brief The type auto white balance
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_AUTOWHITEBALANCECHANGED_TYPE_AUTO = 0,    ///< Auto guess of best white balance params
    ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_AUTOWHITEBALANCECHANGED_TYPE_TUNGSTEN,    ///< Tungsten white balance
    ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_AUTOWHITEBALANCECHANGED_TYPE_DAYLIGHT,    ///< Daylight white balance
    ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_AUTOWHITEBALANCECHANGED_TYPE_CLOUDY,    ///< Cloudy white balance
    ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_AUTOWHITEBALANCECHANGED_TYPE_COOL_WHITE,    ///< White balance for a flash
    ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_AUTOWHITEBALANCECHANGED_TYPE_MAX
} eARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_AUTOWHITEBALANCECHANGED_TYPE;

// Project ARDrone3
// Class MediaStreamingState
// Command VideoEnableChanged

/**
 * @brief Current video streaming status.
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED_ENABLED = 0,    ///< Video streaming is enabled.
    ARCOMMANDS_ARDRONE3_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED_DISABLED,    ///< Video streaming is disabled.
    ARCOMMANDS_ARDRONE3_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED_ERROR,    ///< Video streaming failed to start.
    ARCOMMANDS_ARDRONE3_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED_MAX
} eARCOMMANDS_ARDRONE3_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED;

// Project ARDrone3
// Class GPSSettings
// Command HomeType

/**
 * @brief The type of the home position
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_GPSSETTINGS_HOMETYPE_TYPE_TAKEOFF = 0,    ///< The drone will try to return to the take off position
    ARCOMMANDS_ARDRONE3_GPSSETTINGS_HOMETYPE_TYPE_PILOT,    ///< The drone will try to return to the pilot position
    ARCOMMANDS_ARDRONE3_GPSSETTINGS_HOMETYPE_TYPE_MAX
} eARCOMMANDS_ARDRONE3_GPSSETTINGS_HOMETYPE_TYPE;

// Project ARDrone3
// Class GPSSettingsState
// Command GPSUpdateStateChanged

/**
 * @brief The state of the gps update
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_GPSSETTINGSSTATE_GPSUPDATESTATECHANGED_STATE_UPDATED = 0,    ///< Drone GPS update succeed
    ARCOMMANDS_ARDRONE3_GPSSETTINGSSTATE_GPSUPDATESTATECHANGED_STATE_INPROGRESS,    ///< Drone GPS update In progress
    ARCOMMANDS_ARDRONE3_GPSSETTINGSSTATE_GPSUPDATESTATECHANGED_STATE_FAILED,    ///< Drone GPS update failed
    ARCOMMANDS_ARDRONE3_GPSSETTINGSSTATE_GPSUPDATESTATECHANGED_STATE_MAX
} eARCOMMANDS_ARDRONE3_GPSSETTINGSSTATE_GPSUPDATESTATECHANGED_STATE;

// Project ARDrone3
// Class GPSSettingsState
// Command HomeTypeChanged

/**
 * @brief The type of the home position
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_GPSSETTINGSSTATE_HOMETYPECHANGED_TYPE_TAKEOFF = 0,    ///< The drone will try to return to the take off position
    ARCOMMANDS_ARDRONE3_GPSSETTINGSSTATE_HOMETYPECHANGED_TYPE_PILOT,    ///< The drone will try to return to the pilot position
    ARCOMMANDS_ARDRONE3_GPSSETTINGSSTATE_HOMETYPECHANGED_TYPE_MAX
} eARCOMMANDS_ARDRONE3_GPSSETTINGSSTATE_HOMETYPECHANGED_TYPE;

// Project ARDrone3
// Class Antiflickering
// Command electricFrequency

/**
 * @brief Type of the electric frequency
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_ANTIFLICKERING_ELECTRICFREQUENCY_FREQUENCY_FIFTYHERTZ = 0,    ///< Electric frequency of the country is 50hz
    ARCOMMANDS_ARDRONE3_ANTIFLICKERING_ELECTRICFREQUENCY_FREQUENCY_SIXTYHERTZ,    ///< Electric frequency of the country is 60hz
    ARCOMMANDS_ARDRONE3_ANTIFLICKERING_ELECTRICFREQUENCY_FREQUENCY_MAX
} eARCOMMANDS_ARDRONE3_ANTIFLICKERING_ELECTRICFREQUENCY_FREQUENCY;

// Project ARDrone3
// Class Antiflickering
// Command setMode

/**
 * @brief Mode of the anti flickering functionnality
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_ANTIFLICKERING_SETMODE_MODE_AUTO = 0,    ///< Anti flickering based on the electric frequency previously sent
    ARCOMMANDS_ARDRONE3_ANTIFLICKERING_SETMODE_MODE_FIXEDFIFTYHERTZ,    ///< Anti flickering based on a fixed frequency of 50Hz
    ARCOMMANDS_ARDRONE3_ANTIFLICKERING_SETMODE_MODE_FIXEDSIXTYHERTZ,    ///< Anti flickering based on a fixed frequency of 60Hz
    ARCOMMANDS_ARDRONE3_ANTIFLICKERING_SETMODE_MODE_MAX
} eARCOMMANDS_ARDRONE3_ANTIFLICKERING_SETMODE_MODE;

// Project ARDrone3
// Class AntiflickeringState
// Command electricFrequencyChanged

/**
 * @brief Type of the electric frequency
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_ANTIFLICKERINGSTATE_ELECTRICFREQUENCYCHANGED_FREQUENCY_FIFTYHERTZ = 0,    ///< Electric frequency of the country is 50hz
    ARCOMMANDS_ARDRONE3_ANTIFLICKERINGSTATE_ELECTRICFREQUENCYCHANGED_FREQUENCY_SIXTYHERTZ,    ///< Electric frequency of the country is 60hz
    ARCOMMANDS_ARDRONE3_ANTIFLICKERINGSTATE_ELECTRICFREQUENCYCHANGED_FREQUENCY_MAX
} eARCOMMANDS_ARDRONE3_ANTIFLICKERINGSTATE_ELECTRICFREQUENCYCHANGED_FREQUENCY;

// Project ARDrone3
// Class AntiflickeringState
// Command modeChanged

/**
 * @brief Mode of the anti flickering functionnality
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_ANTIFLICKERINGSTATE_MODECHANGED_MODE_AUTO = 0,    ///< Anti flickering based on the electric frequency previously sent
    ARCOMMANDS_ARDRONE3_ANTIFLICKERINGSTATE_MODECHANGED_MODE_FIXEDFIFTYHERTZ,    ///< Anti flickering based on a fixed frequency of 50Hz
    ARCOMMANDS_ARDRONE3_ANTIFLICKERINGSTATE_MODECHANGED_MODE_FIXEDSIXTYHERTZ,    ///< Anti flickering based on a fixed frequency of 60Hz
    ARCOMMANDS_ARDRONE3_ANTIFLICKERINGSTATE_MODECHANGED_MODE_MAX
} eARCOMMANDS_ARDRONE3_ANTIFLICKERINGSTATE_MODECHANGED_MODE;

// Project ARDrone3
// Class GPSState
// Command HomeTypeAvailabilityChanged

/**
 * @brief The type of the return home
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_GPSSTATE_HOMETYPEAVAILABILITYCHANGED_TYPE_TAKEOFF = 0,    ///< The drone will try to return to the take off position
    ARCOMMANDS_ARDRONE3_GPSSTATE_HOMETYPEAVAILABILITYCHANGED_TYPE_PILOT,    ///< The drone will try to return to the pilot position
    ARCOMMANDS_ARDRONE3_GPSSTATE_HOMETYPEAVAILABILITYCHANGED_TYPE_FIRST_FIX,    ///< The drone has not enough information, it will try to return to the first GPS fix
    ARCOMMANDS_ARDRONE3_GPSSTATE_HOMETYPEAVAILABILITYCHANGED_TYPE_MAX
} eARCOMMANDS_ARDRONE3_GPSSTATE_HOMETYPEAVAILABILITYCHANGED_TYPE;

// Project ARDrone3
// Class GPSState
// Command HomeTypeChosenChanged

/**
 * @brief The type of the return home chosen
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_GPSSTATE_HOMETYPECHOSENCHANGED_TYPE_TAKEOFF = 0,    ///< The drone will try to return to the take off position
    ARCOMMANDS_ARDRONE3_GPSSTATE_HOMETYPECHOSENCHANGED_TYPE_PILOT,    ///< The drone will try to return to the pilot position
    ARCOMMANDS_ARDRONE3_GPSSTATE_HOMETYPECHOSENCHANGED_TYPE_FIRST_FIX,    ///< The drone has not enough information, it will try to return to the first GPS fix
    ARCOMMANDS_ARDRONE3_GPSSTATE_HOMETYPECHOSENCHANGED_TYPE_MAX
} eARCOMMANDS_ARDRONE3_GPSSTATE_HOMETYPECHOSENCHANGED_TYPE;

// Project common
// Class NetworkEvent
// Command Disconnection

/**
 * @brief Cause of the disconnection of the product
 */
typedef enum
{
    ARCOMMANDS_COMMON_NETWORKEVENT_DISCONNECTION_CAUSE_OFF_BUTTON = 0,    ///< The button off has been pressed
    ARCOMMANDS_COMMON_NETWORKEVENT_DISCONNECTION_CAUSE_UNKNOWN,    ///< Unknown generic cause
    ARCOMMANDS_COMMON_NETWORKEVENT_DISCONNECTION_CAUSE_MAX
} eARCOMMANDS_COMMON_NETWORKEVENT_DISCONNECTION_CAUSE;

// Project common
// Class CommonState
// Command SensorsStatesListChanged

/**
 * @brief Sensor name
 */
typedef enum
{
    ARCOMMANDS_COMMON_COMMONSTATE_SENSORSSTATESLISTCHANGED_SENSORNAME_IMU = 0,    ///< Inertial Measurement Unit sensor
    ARCOMMANDS_COMMON_COMMONSTATE_SENSORSSTATESLISTCHANGED_SENSORNAME_BAROMETER,    ///< Barometer sensor
    ARCOMMANDS_COMMON_COMMONSTATE_SENSORSSTATESLISTCHANGED_SENSORNAME_ULTRASOUND,    ///< Ultrasonic sensor
    ARCOMMANDS_COMMON_COMMONSTATE_SENSORSSTATESLISTCHANGED_SENSORNAME_GPS,    ///< GPS sensor
    ARCOMMANDS_COMMON_COMMONSTATE_SENSORSSTATESLISTCHANGED_SENSORNAME_MAGNETOMETER,    ///< Magnetometer sensor
    ARCOMMANDS_COMMON_COMMONSTATE_SENSORSSTATESLISTCHANGED_SENSORNAME_VERTICAL_CAMERA,    ///< Vertical Camera sensor
    ARCOMMANDS_COMMON_COMMONSTATE_SENSORSSTATESLISTCHANGED_SENSORNAME_MAX
} eARCOMMANDS_COMMON_COMMONSTATE_SENSORSSTATESLISTCHANGED_SENSORNAME;

// Project common
// Class Mavlink
// Command Start

/**
 * @brief type of the played mavlink file
 */
typedef enum
{
    ARCOMMANDS_COMMON_MAVLINK_START_TYPE_FLIGHTPLAN = 0,    ///< Mavlink file for FlightPlan
    ARCOMMANDS_COMMON_MAVLINK_START_TYPE_MAPMYHOUSE,    ///< Mavlink file for MapMyHouse
    ARCOMMANDS_COMMON_MAVLINK_START_TYPE_MAX
} eARCOMMANDS_COMMON_MAVLINK_START_TYPE;

// Project common
// Class MavlinkState
// Command MavlinkFilePlayingStateChanged

/**
 * @brief State of the mavlink
 */
typedef enum
{
    ARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_STATE_PLAYING = 0,    ///< Mavlink file is playing
    ARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_STATE_STOPPED,    ///< Mavlink file is stopped (arg filepath and type are useless in this state)
    ARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_STATE_PAUSED,    ///< Mavlink file is paused
    ARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_STATE_MAX
} eARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_STATE;

// Project common
// Class MavlinkState
// Command MavlinkFilePlayingStateChanged

/**
 * @brief type of the played mavlink file
 */
typedef enum
{
    ARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_TYPE_FLIGHTPLAN = 0,    ///< Mavlink file for FlightPlan
    ARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_TYPE_MAPMYHOUSE,    ///< Mavlink file for MapMyHouse
    ARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_TYPE_MAX
} eARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_TYPE;

// Project common
// Class MavlinkState
// Command MavlinkPlayErrorStateChanged

/**
 * @brief State of play error
 */
typedef enum
{
    ARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKPLAYERRORSTATECHANGED_ERROR_NONE = 0,    ///< There is no error
    ARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKPLAYERRORSTATECHANGED_ERROR_NOTINOUTDOORMODE,    ///< The drone is not in outdoor mode
    ARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKPLAYERRORSTATECHANGED_ERROR_GPSNOTFIXED,    ///< The gps is not fixed
    ARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKPLAYERRORSTATECHANGED_ERROR_NOTCALIBRATED,    ///< The magnetometer of the drone is not calibrated
    ARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKPLAYERRORSTATECHANGED_ERROR_MAX
} eARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKPLAYERRORSTATECHANGED_ERROR;

// Project common
// Class CalibrationState
// Command MagnetoCalibrationAxisToCalibrateChanged

/**
 * @brief The axis to calibrate
 */
typedef enum
{
    ARCOMMANDS_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONAXISTOCALIBRATECHANGED_AXIS_XAXIS = 0,    ///< If the current calibration axis should be the x axis
    ARCOMMANDS_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONAXISTOCALIBRATECHANGED_AXIS_YAXIS,    ///< If the current calibration axis should be the y axis
    ARCOMMANDS_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONAXISTOCALIBRATECHANGED_AXIS_ZAXIS,    ///< If the current calibration axis should be the z axis
    ARCOMMANDS_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONAXISTOCALIBRATECHANGED_AXIS_NONE,    ///< If none of the axis should be calibrated
    ARCOMMANDS_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONAXISTOCALIBRATECHANGED_AXIS_MAX
} eARCOMMANDS_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONAXISTOCALIBRATECHANGED_AXIS;

// Project common
// Class FlightPlanState
// Command ComponentStateListChanged

/**
 * @brief Drone FlightPlan component id (unique)
 */
typedef enum
{
    ARCOMMANDS_COMMON_FLIGHTPLANSTATE_COMPONENTSTATELISTCHANGED_COMPONENT_GPS = 0,    ///< GPS for Drone FlightPlan
    ARCOMMANDS_COMMON_FLIGHTPLANSTATE_COMPONENTSTATELISTCHANGED_COMPONENT_CALIBRATION,    ///< Calibration for Drone FlightPlan
    ARCOMMANDS_COMMON_FLIGHTPLANSTATE_COMPONENTSTATELISTCHANGED_COMPONENT_MAVLINK_FILE,    ///< Mavlink file for Drone FlightPlan
    ARCOMMANDS_COMMON_FLIGHTPLANSTATE_COMPONENTSTATELISTCHANGED_COMPONENT_TAKEOFF,    ///< Take off
    ARCOMMANDS_COMMON_FLIGHTPLANSTATE_COMPONENTSTATELISTCHANGED_COMPONENT_MAX
} eARCOMMANDS_COMMON_FLIGHTPLANSTATE_COMPONENTSTATELISTCHANGED_COMPONENT;

// Project JumpingSumo
// Class Piloting
// Command Posture

/**
 * @brief Type of Posture
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_PILOTING_POSTURE_TYPE_STANDING = 0,    ///< Standing type
    ARCOMMANDS_JUMPINGSUMO_PILOTING_POSTURE_TYPE_JUMPER,    ///< Jumper type
    ARCOMMANDS_JUMPINGSUMO_PILOTING_POSTURE_TYPE_KICKER,    ///< Kicker type
    ARCOMMANDS_JUMPINGSUMO_PILOTING_POSTURE_TYPE_MAX
} eARCOMMANDS_JUMPINGSUMO_PILOTING_POSTURE_TYPE;

// Project JumpingSumo
// Class PilotingState
// Command PostureChanged

/**
 * @brief State of posture
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_POSTURECHANGED_STATE_STANDING = 0,    ///< Standing state
    ARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_POSTURECHANGED_STATE_JUMPER,    ///< Jumper state
    ARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_POSTURECHANGED_STATE_KICKER,    ///< Kicker state
    ARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_POSTURECHANGED_STATE_STUCK,    ///< Stuck state
    ARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_POSTURECHANGED_STATE_UNKNOWN,    ///< Unknown state
    ARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_POSTURECHANGED_STATE_MAX
} eARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_POSTURECHANGED_STATE;

// Project JumpingSumo
// Class PilotingState
// Command AlertStateChanged

/**
 * @brief JS alert state
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_ALERTSTATECHANGED_STATE_NONE = 0,    ///< No alert
    ARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_ALERTSTATECHANGED_STATE_CRITICAL_BATTERY,    ///< Critical battery alert
    ARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_ALERTSTATECHANGED_STATE_LOW_BATTERY,    ///< Low battery alert
    ARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_ALERTSTATECHANGED_STATE_MAX
} eARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_ALERTSTATECHANGED_STATE;

// Project JumpingSumo
// Class Animations
// Command Jump

/**
 * @brief Type of jump
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_JUMP_TYPE_LONG = 0,    ///< Long jump.
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_JUMP_TYPE_HIGH,    ///< High jump
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_JUMP_TYPE_MAX
} eARCOMMANDS_JUMPINGSUMO_ANIMATIONS_JUMP_TYPE;

// Project JumpingSumo
// Class Animations
// Command SimpleAnimation

/**
 * @brief Animation ID.
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_SIMPLEANIMATION_ID_STOP = 0,    ///< Stop ongoing animation.
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_SIMPLEANIMATION_ID_SPIN,    ///< Start a spin animation.
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_SIMPLEANIMATION_ID_TAP,    ///< Start a tap animation.
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_SIMPLEANIMATION_ID_SLOWSHAKE,    ///< Start a slow shake animation.
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_SIMPLEANIMATION_ID_METRONOME,    ///< Start a Metronome animation.
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_SIMPLEANIMATION_ID_ONDULATION,    ///< Start a standing dance animation.
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_SIMPLEANIMATION_ID_SPINJUMP,    ///< Start a spin jump animation.
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_SIMPLEANIMATION_ID_SPINTOPOSTURE,    ///< Start a spin that end in standing posture, or in jumper if it was standing animation.
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_SIMPLEANIMATION_ID_SPIRAL,    ///< Start a spiral animation.
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_SIMPLEANIMATION_ID_SLALOM,    ///< Start a slalom animation.
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_SIMPLEANIMATION_ID_MAX
} eARCOMMANDS_JUMPINGSUMO_ANIMATIONS_SIMPLEANIMATION_ID;

// Project JumpingSumo
// Class AnimationsState
// Command JumpLoadChanged

/**
 * @brief State of jump load
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPLOADCHANGED_STATE_UNKNOWN = 0,    ///< Unknown state (obsolete).
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPLOADCHANGED_STATE_UNLOADED,    ///< Unloaded state.
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPLOADCHANGED_STATE_LOADED,    ///< Loaded state.
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPLOADCHANGED_STATE_BUSY,    ///< Unknown state (obsolete).
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPLOADCHANGED_STATE_LOW_BATTERY_UNLOADED,    ///< Unloaded state and low battery.
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPLOADCHANGED_STATE_LOW_BATTERY_LOADED,    ///< Loaded state and low battery.
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPLOADCHANGED_STATE_MAX
} eARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPLOADCHANGED_STATE;

// Project JumpingSumo
// Class AnimationsState
// Command JumpTypeChanged

/**
 * @brief State of jump type.
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPTYPECHANGED_STATE_NONE = 0,    ///< None.
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPTYPECHANGED_STATE_LONG,    ///< Long jump type.
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPTYPECHANGED_STATE_HIGH,    ///< High jump type.
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPTYPECHANGED_STATE_MAX
} eARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPTYPECHANGED_STATE;

// Project JumpingSumo
// Class AnimationsState
// Command JumpMotorProblemChanged

/**
 * @brief Enum describing the problem of the motor
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPMOTORPROBLEMCHANGED_ERROR_NONE = 0,    ///< None.
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPMOTORPROBLEMCHANGED_ERROR_BLOCKED,    ///< Motor blocked
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPMOTORPROBLEMCHANGED_ERROR_OVER_HEATED,    ///< Motor over heated
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPMOTORPROBLEMCHANGED_ERROR_MAX
} eARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPMOTORPROBLEMCHANGED_ERROR;

// Project JumpingSumo
// Class MediaRecord
// Command Video

/**
 * @brief Command to record video
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORD_VIDEO_RECORD_STOP = 0,    ///< Stop the video recording
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORD_VIDEO_RECORD_START,    ///< Start the video recording
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORD_VIDEO_RECORD_MAX
} eARCOMMANDS_JUMPINGSUMO_MEDIARECORD_VIDEO_RECORD;

// Project JumpingSumo
// Class MediaRecord
// Command VideoV2

/**
 * @brief Command to record video
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORD_VIDEOV2_RECORD_STOP = 0,    ///< Stop the video recording
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORD_VIDEOV2_RECORD_START,    ///< Start the video recording
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORD_VIDEOV2_RECORD_MAX
} eARCOMMANDS_JUMPINGSUMO_MEDIARECORD_VIDEOV2_RECORD;

// Project JumpingSumo
// Class MediaRecordState
// Command VideoStateChanged

/**
 * @brief State of video
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE_STOPPED = 0,    ///< Video was stopped
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE_STARTED,    ///< Video was started
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE_FAILED,    ///< Video was failed
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE_MAX
} eARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE;

// Project JumpingSumo
// Class MediaRecordState
// Command PictureStateChangedV2

/**
 * @brief State of device picture recording
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE_READY = 0,    ///< The picture recording is ready
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE_BUSY,    ///< The picture recording is busy
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE_NOTAVAILABLE,    ///< The picture recording is not available
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE_MAX
} eARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE;

// Project JumpingSumo
// Class MediaRecordState
// Command PictureStateChangedV2

/**
 * @brief Error to explain the state
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_OK = 0,    ///< No Error
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_UNKNOWN,    ///< Unknown generic error
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_CAMERA_KO,    ///< Picture camera is out of order
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_MEMORYFULL,    ///< Memory full ; cannot save one additional picture
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_LOWBATTERY,    ///< Battery is too low to start/keep recording.
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_MAX
} eARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR;

// Project JumpingSumo
// Class MediaRecordState
// Command VideoStateChangedV2

/**
 * @brief State of device video recording
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE_STOPPED = 0,    ///< Video is stopped
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE_STARTED,    ///< Video is started
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE_NOTAVAILABLE,    ///< The video recording is not available
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE_MAX
} eARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE;

// Project JumpingSumo
// Class MediaRecordState
// Command VideoStateChangedV2

/**
 * @brief Error to explain the state
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_OK = 0,    ///< No Error
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_UNKNOWN,    ///< Unknown generic error
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_CAMERA_KO,    ///< Video camera is out of order
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_MEMORYFULL,    ///< Memory full ; cannot save one additional video
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_LOWBATTERY,    ///< Battery is too low to start/keep recording.
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_MAX
} eARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR;

// Project JumpingSumo
// Class MediaRecordEvent
// Command PictureEventChanged

/**
 * @brief Last event of picture recording
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT_TAKEN = 0,    ///< Picture taken and saved
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT_FAILED,    ///< Picture failed
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT_MAX
} eARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT;

// Project JumpingSumo
// Class MediaRecordEvent
// Command PictureEventChanged

/**
 * @brief Error to explain the event
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_OK = 0,    ///< No Error
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_UNKNOWN,    ///< Unknown generic error ; only when state is failed
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_BUSY,    ///< Picture recording is busy ; only when state is failed
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_NOTAVAILABLE,    ///< Picture recording not available ; only when state is failed
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_MEMORYFULL,    ///< Memory full ; only when state is failed
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_LOWBATTERY,    ///< Battery is too low to record.
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_MAX
} eARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR;

// Project JumpingSumo
// Class MediaRecordEvent
// Command VideoEventChanged

/**
 * @brief Event of video recording
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT_START = 0,    ///< Video start
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT_STOP,    ///< Video stop and saved
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT_FAILED,    ///< Video failed
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT_MAX
} eARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT;

// Project JumpingSumo
// Class MediaRecordEvent
// Command VideoEventChanged

/**
 * @brief Error to explain the event
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_OK = 0,    ///< No Error
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_UNKNOWN,    ///< Unknown generic error ; only when state is failed
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_BUSY,    ///< Video recording is busy ; only when state is failed
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_NOTAVAILABLE,    ///< Video recording not available ; only when state is failed
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_MEMORYFULL,    ///< Memory full
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_LOWBATTERY,    ///< Battery is too low to record.
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_AUTOSTOPPED,    ///< Video was auto stopped
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_MAX
} eARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR;

// Project JumpingSumo
// Class NetworkSettings
// Command WifiSelection

/**
 * @brief The type of wifi selection (auto, manual)
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGS_WIFISELECTION_TYPE_AUTO = 0,    ///< Auto selection
    ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGS_WIFISELECTION_TYPE_MANUAL,    ///< Manual selection
    ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGS_WIFISELECTION_TYPE_MAX
} eARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGS_WIFISELECTION_TYPE;

// Project JumpingSumo
// Class NetworkSettings
// Command WifiSelection

/**
 * @brief The allowed band(s) : 2.4 Ghz, 5 Ghz, or all
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGS_WIFISELECTION_BAND_2_4GHZ = 0,    ///< 2.4 GHz band
    ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGS_WIFISELECTION_BAND_5GHZ,    ///< 5 GHz band
    ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGS_WIFISELECTION_BAND_ALL,    ///< Both 2.4 and 5 GHz bands
    ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGS_WIFISELECTION_BAND_MAX
} eARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGS_WIFISELECTION_BAND;

// Project JumpingSumo
// Class NetworkSettingsState
// Command WifiSelectionChanged

/**
 * @brief The type of wifi selection settings
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_AUTO_ALL = 0,    ///< Auto selection
    ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_AUTO_2_4GHZ,    ///< Auto selection 2.4ghz
    ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_AUTO_5GHZ,    ///< Auto selection 5 ghz
    ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_MANUAL,    ///< Manual selection
    ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_MAX
} eARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE;

// Project JumpingSumo
// Class NetworkSettingsState
// Command WifiSelectionChanged

/**
 * @brief The actual  wifi band state
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_2_4GHZ = 0,    ///< 2.4 GHz band
    ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_5GHZ,    ///< 5 GHz band
    ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_ALL,    ///< Both 2.4 and 5 GHz bands
    ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_MAX
} eARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND;

// Project JumpingSumo
// Class Network
// Command WifiScan

/**
 * @brief The band(s) : 2.4 Ghz, 5 Ghz, or both
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_NETWORK_WIFISCAN_BAND_2_4GHZ = 0,    ///< 2.4 GHz band
    ARCOMMANDS_JUMPINGSUMO_NETWORK_WIFISCAN_BAND_5GHZ,    ///< 5 GHz band
    ARCOMMANDS_JUMPINGSUMO_NETWORK_WIFISCAN_BAND_ALL,    ///< Both 2.4 and 5 GHz bands
    ARCOMMANDS_JUMPINGSUMO_NETWORK_WIFISCAN_BAND_MAX
} eARCOMMANDS_JUMPINGSUMO_NETWORK_WIFISCAN_BAND;

// Project JumpingSumo
// Class NetworkState
// Command WifiScanListChanged

/**
 * @brief The band : 2.4 GHz or 5 GHz
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_NETWORKSTATE_WIFISCANLISTCHANGED_BAND_2_4GHZ = 0,    ///< 2.4 GHz band
    ARCOMMANDS_JUMPINGSUMO_NETWORKSTATE_WIFISCANLISTCHANGED_BAND_5GHZ,    ///< 5 GHz band
    ARCOMMANDS_JUMPINGSUMO_NETWORKSTATE_WIFISCANLISTCHANGED_BAND_MAX
} eARCOMMANDS_JUMPINGSUMO_NETWORKSTATE_WIFISCANLISTCHANGED_BAND;

// Project JumpingSumo
// Class NetworkState
// Command WifiAuthChannelListChanged

/**
 * @brief The band of this channel : 2.4 GHz or 5 GHz
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND_2_4GHZ = 0,    ///< 2.4 GHz band
    ARCOMMANDS_JUMPINGSUMO_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND_5GHZ,    ///< 5 GHz band
    ARCOMMANDS_JUMPINGSUMO_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND_MAX
} eARCOMMANDS_JUMPINGSUMO_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND;

// Project JumpingSumo
// Class AudioSettings
// Command Theme

/**
 * @brief The audio theme to set.
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGS_THEME_THEME_DEFAULT = 0,    ///< Default audio theme (depends on the product color)
    ARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGS_THEME_THEME_ROBOT,    ///< Robot audio theme.
    ARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGS_THEME_THEME_INSECT,    ///< Insect audio theme.
    ARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGS_THEME_THEME_MONSTER,    ///< Monster audio theme.
    ARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGS_THEME_THEME_MAX
} eARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGS_THEME_THEME;

// Project JumpingSumo
// Class AudioSettingsState
// Command ThemeChanged

/**
 * @brief The audio theme to set.
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGSSTATE_THEMECHANGED_THEME_DEFAULT = 0,    ///< Default audio theme (depends on the product color)
    ARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGSSTATE_THEMECHANGED_THEME_ROBOT,    ///< Robot audio theme.
    ARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGSSTATE_THEMECHANGED_THEME_INSECT,    ///< Insect audio theme.
    ARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGSSTATE_THEMECHANGED_THEME_MONSTER,    ///< Monster audio theme.
    ARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGSSTATE_THEMECHANGED_THEME_MAX
} eARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGSSTATE_THEMECHANGED_THEME;

// Project JumpingSumo
// Class RoadPlanState
// Command ScriptUploadChanged

/**
 * @brief Error code.
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTUPLOADCHANGED_RESULTCODE_ERROR_OK = 0,    ///< The script was parsed successfully.
    ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTUPLOADCHANGED_RESULTCODE_ERROR_FILE_CORRUPTED,    ///< The MD5 hash codes are different or file is unreadable.
    ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTUPLOADCHANGED_RESULTCODE_ERROR_INVALID_FORMAT,    ///< The parser is not well formed or can not be parsed.
    ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTUPLOADCHANGED_RESULTCODE_ERROR_FILE_TOO_LARGE,    ///< The file is larger than maximum allowed size.
    ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTUPLOADCHANGED_RESULTCODE_ERROR_UNSUPPORTED,    ///< Script version is not supported by device.
    ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTUPLOADCHANGED_RESULTCODE_MAX
} eARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTUPLOADCHANGED_RESULTCODE;

// Project JumpingSumo
// Class RoadPlanState
// Command ScriptDeleteChanged

/**
 * @brief Error code.
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTDELETECHANGED_RESULTCODE_ERROR_OK = 0,    ///< The script was deleted successfully.
    ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTDELETECHANGED_RESULTCODE_ERROR_NO_SUCH_SCRIPT,    ///< No script with this uuid exists.
    ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTDELETECHANGED_RESULTCODE_ERROR_INTERNAL_FAILURE,    ///< An internal error occured while attempting to delete the script.
    ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTDELETECHANGED_RESULTCODE_MAX
} eARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTDELETECHANGED_RESULTCODE;

// Project JumpingSumo
// Class RoadPlanState
// Command PlayScriptChanged

/**
 * @brief Error code.
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_PLAYSCRIPTCHANGED_RESULTCODE_SCRIPT_STARTED = 0,    ///< The script started playing successfully.
    ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_PLAYSCRIPTCHANGED_RESULTCODE_SCRIPT_FINISHED,    ///< The script finished successfully.
    ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_PLAYSCRIPTCHANGED_RESULTCODE_SCRIPT_NO_SUCH_SCRIPT,    ///< No script with this uuid exists.
    ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_PLAYSCRIPTCHANGED_RESULTCODE_SCRIPT_ERROR,    ///< An error occured while playing the script.
    ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_PLAYSCRIPTCHANGED_RESULTCODE_MAX
} eARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_PLAYSCRIPTCHANGED_RESULTCODE;

// Project JumpingSumo
// Class MediaStreamingState
// Command VideoEnableChanged

/**
 * @brief Current video streaming status.
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED_ENABLED = 0,    ///< Video streaming is enabled.
    ARCOMMANDS_JUMPINGSUMO_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED_DISABLED,    ///< Video streaming is disabled.
    ARCOMMANDS_JUMPINGSUMO_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED_ERROR,    ///< Video streaming failed to start.
    ARCOMMANDS_JUMPINGSUMO_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED_MAX
} eARCOMMANDS_JUMPINGSUMO_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED;

// Project JumpingSumoDebug
// Class Animation
// Command playAnimation

/**
 * @brief Animation ID.
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMODEBUG_ANIMATION_PLAYANIMATION_ID_STOP = 0,    ///< Stop ongoing animation.
    ARCOMMANDS_JUMPINGSUMODEBUG_ANIMATION_PLAYANIMATION_ID_SPIN,    ///< Start a spin animation.
    ARCOMMANDS_JUMPINGSUMODEBUG_ANIMATION_PLAYANIMATION_ID_TAP,    ///< Start a tap animation.
    ARCOMMANDS_JUMPINGSUMODEBUG_ANIMATION_PLAYANIMATION_ID_SLOWSHAKE,    ///< Start a slow shake animation.
    ARCOMMANDS_JUMPINGSUMODEBUG_ANIMATION_PLAYANIMATION_ID_METRONOME,    ///< Start a Metronome animation.
    ARCOMMANDS_JUMPINGSUMODEBUG_ANIMATION_PLAYANIMATION_ID_ONDULATION,    ///< Start a standing dance animation.
    ARCOMMANDS_JUMPINGSUMODEBUG_ANIMATION_PLAYANIMATION_ID_SPINJUMP,    ///< Start a spin jump animation.
    ARCOMMANDS_JUMPINGSUMODEBUG_ANIMATION_PLAYANIMATION_ID_SPINTOPOSTURE,    ///< Start a spin that end in standing posture, or in jumper if it was standing animation.
    ARCOMMANDS_JUMPINGSUMODEBUG_ANIMATION_PLAYANIMATION_ID_SPIRAL,    ///< Start a spiral animation.
    ARCOMMANDS_JUMPINGSUMODEBUG_ANIMATION_PLAYANIMATION_ID_SLALOM,    ///< Start a slalom animation.
    ARCOMMANDS_JUMPINGSUMODEBUG_ANIMATION_PLAYANIMATION_ID_USERSCRIPT,    ///< Start a user-defined script.
    ARCOMMANDS_JUMPINGSUMODEBUG_ANIMATION_PLAYANIMATION_ID_MAX
} eARCOMMANDS_JUMPINGSUMODEBUG_ANIMATION_PLAYANIMATION_ID;

// Project MiniDrone
// Class PilotingState
// Command FlyingStateChanged

/**
 * @brief Drone flying state
 */
typedef enum
{
    ARCOMMANDS_MINIDRONE_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_LANDED = 0,    ///< Landed state
    ARCOMMANDS_MINIDRONE_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_TAKINGOFF,    ///< Taking off state
    ARCOMMANDS_MINIDRONE_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_HOVERING,    ///< Hovering state
    ARCOMMANDS_MINIDRONE_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_FLYING,    ///< Flying state
    ARCOMMANDS_MINIDRONE_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_LANDING,    ///< Landing state
    ARCOMMANDS_MINIDRONE_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_EMERGENCY,    ///< Emergency state
    ARCOMMANDS_MINIDRONE_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_ROLLING,    ///< Rolling state
    ARCOMMANDS_MINIDRONE_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_MAX
} eARCOMMANDS_MINIDRONE_PILOTINGSTATE_FLYINGSTATECHANGED_STATE;

// Project MiniDrone
// Class PilotingState
// Command AlertStateChanged

/**
 * @brief Drone alert state
 */
typedef enum
{
    ARCOMMANDS_MINIDRONE_PILOTINGSTATE_ALERTSTATECHANGED_STATE_NONE = 0,    ///< No alert
    ARCOMMANDS_MINIDRONE_PILOTINGSTATE_ALERTSTATECHANGED_STATE_USER,    ///< User emergency alert
    ARCOMMANDS_MINIDRONE_PILOTINGSTATE_ALERTSTATECHANGED_STATE_CUT_OUT,    ///< Cut out alert
    ARCOMMANDS_MINIDRONE_PILOTINGSTATE_ALERTSTATECHANGED_STATE_CRITICAL_BATTERY,    ///< Critical battery alert
    ARCOMMANDS_MINIDRONE_PILOTINGSTATE_ALERTSTATECHANGED_STATE_LOW_BATTERY,    ///< Low battery alert
    ARCOMMANDS_MINIDRONE_PILOTINGSTATE_ALERTSTATECHANGED_STATE_MAX
} eARCOMMANDS_MINIDRONE_PILOTINGSTATE_ALERTSTATECHANGED_STATE;

// Project MiniDrone
// Class Animations
// Command Flip

/**
 * @brief Direction for the flip
 */
typedef enum
{
    ARCOMMANDS_MINIDRONE_ANIMATIONS_FLIP_DIRECTION_FRONT = 0,    ///< Flip direction front
    ARCOMMANDS_MINIDRONE_ANIMATIONS_FLIP_DIRECTION_BACK,    ///< Flip direction back
    ARCOMMANDS_MINIDRONE_ANIMATIONS_FLIP_DIRECTION_RIGHT,    ///< Flip direction right
    ARCOMMANDS_MINIDRONE_ANIMATIONS_FLIP_DIRECTION_LEFT,    ///< Flip direction left
    ARCOMMANDS_MINIDRONE_ANIMATIONS_FLIP_DIRECTION_MAX
} eARCOMMANDS_MINIDRONE_ANIMATIONS_FLIP_DIRECTION;

// Project MiniDrone
// Class MediaRecordState
// Command PictureStateChangedV2

/**
 * @brief State of device picture recording
 */
typedef enum
{
    ARCOMMANDS_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE_READY = 0,    ///< The picture recording is ready
    ARCOMMANDS_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE_BUSY,    ///< The picture recording is busy
    ARCOMMANDS_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE_NOTAVAILABLE,    ///< The picture recording is not available
    ARCOMMANDS_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE_MAX
} eARCOMMANDS_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE;

// Project MiniDrone
// Class MediaRecordState
// Command PictureStateChangedV2

/**
 * @brief Error to explain the state
 */
typedef enum
{
    ARCOMMANDS_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_OK = 0,    ///< No Error
    ARCOMMANDS_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_UNKNOWN,    ///< Unknown generic error
    ARCOMMANDS_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_CAMERA_KO,    ///< Picture camera is out of order
    ARCOMMANDS_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_MEMORYFULL,    ///< Memory full ; cannot save one additional picture
    ARCOMMANDS_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_LOWBATTERY,    ///< Battery is too low to start/keep recording.
    ARCOMMANDS_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_MAX
} eARCOMMANDS_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR;

// Project MiniDrone
// Class MediaRecordEvent
// Command PictureEventChanged

/**
 * @brief Last event of picture recording
 */
typedef enum
{
    ARCOMMANDS_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT_TAKEN = 0,    ///< Picture taken and saved
    ARCOMMANDS_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT_FAILED,    ///< Picture failed
    ARCOMMANDS_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT_MAX
} eARCOMMANDS_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT;

// Project MiniDrone
// Class MediaRecordEvent
// Command PictureEventChanged

/**
 * @brief Error to explain the event
 */
typedef enum
{
    ARCOMMANDS_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_OK = 0,    ///< No Error
    ARCOMMANDS_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_UNKNOWN,    ///< Unknown generic error ; only when state is failed
    ARCOMMANDS_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_BUSY,    ///< Picture recording is busy ; only when state is failed
    ARCOMMANDS_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_NOTAVAILABLE,    ///< Picture recording not available ; only when state is failed
    ARCOMMANDS_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_MEMORYFULL,    ///< Memory full ; only when state is failed
    ARCOMMANDS_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_LOWBATTERY,    ///< Battery is too low to record.
    ARCOMMANDS_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_MAX
} eARCOMMANDS_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR;

// Project SkyController
// Class WifiState
// Command ConnexionChanged

/**
 * @brief Wifi status
 */
typedef enum
{
    ARCOMMANDS_SKYCONTROLLER_WIFISTATE_CONNEXIONCHANGED_STATUS_CONNECTED = 0,    ///< Connected
    ARCOMMANDS_SKYCONTROLLER_WIFISTATE_CONNEXIONCHANGED_STATUS_ERROR,    ///< Error
    ARCOMMANDS_SKYCONTROLLER_WIFISTATE_CONNEXIONCHANGED_STATUS_DISCONNECTED,    ///< Disconnected
    ARCOMMANDS_SKYCONTROLLER_WIFISTATE_CONNEXIONCHANGED_STATUS_MAX
} eARCOMMANDS_SKYCONTROLLER_WIFISTATE_CONNEXIONCHANGED_STATUS;

// Project SkyController
// Class WifiState
// Command WifiAuthChannelListChanged

/**
 * @brief The band of this channel : 2.4 GHz or 5 GHz
 */
typedef enum
{
    ARCOMMANDS_SKYCONTROLLER_WIFISTATE_WIFIAUTHCHANNELLISTCHANGED_BAND_2_4GHZ = 0,    ///< 2.4 GHz band
    ARCOMMANDS_SKYCONTROLLER_WIFISTATE_WIFIAUTHCHANNELLISTCHANGED_BAND_5GHZ,    ///< 5 GHz band
    ARCOMMANDS_SKYCONTROLLER_WIFISTATE_WIFIAUTHCHANNELLISTCHANGED_BAND_MAX
} eARCOMMANDS_SKYCONTROLLER_WIFISTATE_WIFIAUTHCHANNELLISTCHANGED_BAND;

// Project SkyController
// Class DeviceState
// Command ConnexionChanged

/**
 * @brief Wifi status to Device
 */
typedef enum
{
    ARCOMMANDS_SKYCONTROLLER_DEVICESTATE_CONNEXIONCHANGED_STATUS_NOTCONNECTED = 0,    ///< Not Connected
    ARCOMMANDS_SKYCONTROLLER_DEVICESTATE_CONNEXIONCHANGED_STATUS_CONNECTING,    ///< Connecting to Device
    ARCOMMANDS_SKYCONTROLLER_DEVICESTATE_CONNEXIONCHANGED_STATUS_CONNECTED,    ///< Connected to Device
    ARCOMMANDS_SKYCONTROLLER_DEVICESTATE_CONNEXIONCHANGED_STATUS_DISCONNECTING,    ///< Disconnecting from Device
    ARCOMMANDS_SKYCONTROLLER_DEVICESTATE_CONNEXIONCHANGED_STATUS_MAX
} eARCOMMANDS_SKYCONTROLLER_DEVICESTATE_CONNEXIONCHANGED_STATUS;

// Project SkyController
// Class AccessPointSettings
// Command WifiSelection

/**
 * @brief The type of wifi selection (only manual at the moment)
 */
typedef enum
{
    ARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGS_WIFISELECTION_TYPE_MANUAL = 0,    ///< Manual selection
    ARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGS_WIFISELECTION_TYPE_MAX
} eARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGS_WIFISELECTION_TYPE;

// Project SkyController
// Class AccessPointSettings
// Command WifiSelection

/**
 * @brief The allowed band : 2.4 Ghz or 5 Ghz
 */
typedef enum
{
    ARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGS_WIFISELECTION_BAND_2_4GHZ = 0,    ///< 2.4 GHz band
    ARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGS_WIFISELECTION_BAND_5GHZ,    ///< 5 GHz band
    ARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGS_WIFISELECTION_BAND_MAX
} eARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGS_WIFISELECTION_BAND;

// Project SkyController
// Class AccessPointSettingsState
// Command WifiSelectionChanged

/**
 * @brief The type of wifi selection (only manual at the moment)
 */
typedef enum
{
    ARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_MANUAL = 0,    ///< Manual selection
    ARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_MAX
} eARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE;

// Project SkyController
// Class AccessPointSettingsState
// Command WifiSelectionChanged

/**
 * @brief The allowed band : 2.4 Ghz or 5 Ghz
 */
typedef enum
{
    ARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_2_4GHZ = 0,    ///< 2.4 GHz band
    ARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_5GHZ,    ///< 5 GHz band
    ARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_MAX
} eARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_WIFISELECTIONCHANGED_BAND;

// Project SkyController
// Class GamepadInfosState
// Command gamepadControl

/**
 * @brief The type (axis/button) of the control
 */
typedef enum
{
    ARCOMMANDS_SKYCONTROLLER_GAMEPADINFOSSTATE_GAMEPADCONTROL_TYPE_AXIS = 0,    ///< An analog axis (one of the 4 joysticks)
    ARCOMMANDS_SKYCONTROLLER_GAMEPADINFOSSTATE_GAMEPADCONTROL_TYPE_BUTTON,    ///< A button (including small joystick clicks)
    ARCOMMANDS_SKYCONTROLLER_GAMEPADINFOSSTATE_GAMEPADCONTROL_TYPE_MAX
} eARCOMMANDS_SKYCONTROLLER_GAMEPADINFOSSTATE_GAMEPADCONTROL_TYPE;

// Project SkyController
// Class CoPiloting
// Command setPilotingSource

/**
 * @brief The source
 */
typedef enum
{
    ARCOMMANDS_SKYCONTROLLER_COPILOTING_SETPILOTINGSOURCE_SOURCE_SKYCONTROLLER = 0,    ///< Use the SkyController joysticks
    ARCOMMANDS_SKYCONTROLLER_COPILOTING_SETPILOTINGSOURCE_SOURCE_CONTROLLER,    ///< Use the Tablet (or smartphone, or whatever) controls
    ARCOMMANDS_SKYCONTROLLER_COPILOTING_SETPILOTINGSOURCE_SOURCE_MAX
} eARCOMMANDS_SKYCONTROLLER_COPILOTING_SETPILOTINGSOURCE_SOURCE;

// Project SkyController
// Class CoPilotingState
// Command pilotingSource

/**
 * @brief The source
 */
typedef enum
{
    ARCOMMANDS_SKYCONTROLLER_COPILOTINGSTATE_PILOTINGSOURCE_SOURCE_SKYCONTROLLER = 0,    ///< Use the SkyController joysticks
    ARCOMMANDS_SKYCONTROLLER_COPILOTINGSTATE_PILOTINGSOURCE_SOURCE_CONTROLLER,    ///< Use the Tablet (or smartphone, or whatever) controls
    ARCOMMANDS_SKYCONTROLLER_COPILOTINGSTATE_PILOTINGSOURCE_SOURCE_MAX
} eARCOMMANDS_SKYCONTROLLER_COPILOTINGSTATE_PILOTINGSOURCE_SOURCE;

// Project SkyController
// Class CalibrationState
// Command MagnetoCalibrationState

/**
 * @brief The global status of the calibration
 */
typedef enum
{
    ARCOMMANDS_SKYCONTROLLER_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATE_STATUS_UNRELIABLE = 0,    ///< A calibration is needed
    ARCOMMANDS_SKYCONTROLLER_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATE_STATUS_ASSESSING,    ///< A calibration is applied, but still need to be checked
    ARCOMMANDS_SKYCONTROLLER_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATE_STATUS_CALIBRATED,    ///< The sensor is properly calibrated
    ARCOMMANDS_SKYCONTROLLER_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATE_STATUS_MAX
} eARCOMMANDS_SKYCONTROLLER_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATE_STATUS;


#endif /* _LIBARCOMMANDS_ARCOMMANDS_TYPES_H_ */
